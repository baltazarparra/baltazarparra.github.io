---
layout: post
title: Entendendo Closure
date: 2017-07-05 06:32:31 -0200
categories: Javascript
---

**Closure**, é a forma que tratamos nosso escopo dentro do Javascript.

~~~javascript
function pai() {
  function filha() {
    return 1 + 2
  }
  return filha()
}
~~~

Como o Javascript possui escopo de função, eu tenho acesso a função *filha*,
apenas enquanto dentro da função *pai*, caso tente chamar ela fora:

~~~javascript
function pai() {
  function filha() {
    return 1 + 2
  }
}
return filha()

ReferenceError: filha is not defined
~~~

Só temos acesso aos recursos de uma função, enquanto estivermos dentro dela,
isso serve pra tudo, inclusive váriaveis.

~~~javascript
function pai() {
  var a = 'a'
  function filha() {
    return a
  }
  return a
}
~~~

Dentro da função, eu tenho acesso livre aos recursos da mesma,
mesmo se estivermos dentro de uma outra função.

A função *filha* vai ter acesso a todos recursos do escopo da função *pai*,
chamamos isso de **Closure**, que é quando uma função tem acesso a recursos externos.

Acho que ficaria bem mais simples apenas dizendo que a função *filha*, recebe recursos da função *pai*,
mas programadores gostam de nomes e termos descolados, então...

Outro ponto importante, a função *pai* não tem acesso aos recursos da função *filha*,
só o contrário é verdadeiro.

Ou seja, a função *pai*, é só uma função comum, sem graça, normalzinha, enquanto a função *filha*,
é uma **Closure** super descolada.
